---
import { Languages, PricePC } from '~/utils/types';

export interface Props {
	title: string;
	price: PricePC;
	stars: number;
	url: string;
	click_message: string;
	image_source: string;
	specs: string[][];
}

const { title, price, stars, url, click_message, image_source, specs } = Astro.props;

const { language } = Astro.props;

function printDate(dateString: string) {
	if (!dateString) return '';
	var x = dateString + 'Z';

	const dateDate = new Date(Date.parse(x));
	const yyyy = dateDate.getFullYear();
	let mm = (dateDate.getMonth() + 1).toString().padStart(2, '0'); // Months start at 0!
	let dd = dateDate.getDate().toString().padStart(2, '0');

	const formattedDate = dd + '/' + mm + '/' + yyyy;

	let hh = dateDate.getHours();
	let minutes = dateDate.getMinutes();
	let seconds = dateDate.getSeconds();

	if (hh == 0 && minutes == 0 && seconds == 0) return [formattedDate];

	const formattedTime =
		hh.toString().padStart(2, '0') +
		':' +
		minutes.toString().padStart(2, '0') +
		':' +
		seconds.toString().padStart(2, '0');

	return [formattedDate, formattedTime];
}

const priceTime = printDate(price.time);
---

<div
	class="w-full max-w-sm bg-white rounded-lg shadow-md dark:bg-gray-800 dark:border-gray-700 text-gray-900 dark:text-white"
>
	<a href={url}>
		<img class="p-8 rounded-t-lg" src={image_source} alt="product image" />
	</a>
	<div class="px-5 pb-5">
		<a href={url}>
			<h5 class="text-xl font-semibold tracking-tight text-gray-900 dark:text-white">{title}</h5>
		</a>
		<div class="flex items-center mt-2.5 mb-5">
			{
				stars > 0 &&
					Array.from('x'.repeat(stars)).map(() => {
						return (
							<svg
								aria-hidden="true"
								class="w-5 h-5 text-yellow-300"
								fill="currentColor"
								viewBox="0 0 20 20"
								xmlns="http://www.w3.org/2000/svg"
							>
								<>
									<title>Star</title>
									<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
								</>
							</svg>
						);
					})
			}
			<span
				class="bg-blue-100 text-blue-800 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded dark:bg-blue-200 dark:text-blue-800 ml-3"
				>{stars}</span
			>
		</div>
		<div>
			{
				specs != null &&
					specs.map((pc) => {
						return <div class="md:w-sm max-w-xs m-auto">{language == Languages.IT ? pc[0] : pc[1]}</div>;
					})
			}
			{specs != null && <div style="padding-top:10px;" />}
		</div>
		<div class="flex items-center justify-between">
			<table>
				<tr>
					<td>
						<div class="bg-neutral-700 rounded-full px-7 py-2">
							<span class="text-2xl font-bold text-gray-900 dark:text-white"
								>{(Math.round(price.value * 100) / 100).toFixed(2)} â‚¬</span
							>
							<table class="text-sm">
								<tr>
									<td
										><img
											width="30"
											src="https://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/calendar-clock-icon.png"
										/>
									</td>
									<td>
										<table class="text-center">
											<tr>
												<td>
													<span>{priceTime[0]}</span>
												</td>
											</tr>
											<tr>
												<td>
													{priceTime[1] ? <span>{priceTime[1]}</span> : ''}
												</td>
											</tr>
										</table>
									</td>
								</tr>
							</table>
						</div>
					</td>
					<td>
						<div class="px-1"></div>
					</td>
					<td>
						<a
							href={url}
							class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
							>{click_message}</a
						>
					</td>
				</tr>
			</table>
		</div>
	</div>
</div>
